{"version":3,"file":"static/js/main.44549e4b.js","mappings":"8MAAaA,EAED,UAFCA,EAGL,UAHKA,EAIA,UAJAA,EAKF,UALEA,EAMA,UASAC,GANaC,EAAA,IAAAC,EAAAA,EAAAA,SAAAD,EACvBF,EAAkB,WAAGG,EAAAA,EAAAA,SAAAD,EACrBF,EAAiB,iBAAIG,EAAAA,EAAAA,SAAAD,EACrBF,EAAmB,gBAGF,QACPI,EAAQ,MAERC,EAAO,CAClB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAACJ,EAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAKG,I,UCjB/BE,GADOC,EAAAA,QAAAA,IAAe,UAAUC,MACN,IAAMH,EAAK,GAAGI,OAC/CC,EAAuB,IAAXJ,EAElB,QAAeK,EAAAA,QAAAA,OAAkB,CAC/BC,SAAU,CACRC,UAAW,UACXC,UAAW,QAEbC,IAAK,CACHF,UAAW,UACXG,cAAe,MACfC,eAAgB,UAElBC,IAAK,CACHV,MAAOF,EAAW,EAClBa,OAAQT,EAAY,GACpBU,OAAQ,EACRC,aAAc,EACdC,gBAAiBtB,EACjBiB,eAAgB,SAChBM,WAAY,UAEdC,QAAS,CACPC,MAAOzB,EACP0B,WAAY,OACZC,WAAY,UACZC,SAAU,M,cCqBd,QA/CiB,SAAHC,GAKP,IAADC,EAAAD,EAJJE,aAAAA,OAAY,IAAAD,EAAG,WAAO,EAACA,EAAAE,EAAAH,EACvBI,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EAAAE,EAAAL,EACdM,WAAAA,OAAU,IAAAD,EAAG,GAAEA,EAAAE,EAAAP,EACfQ,SAAAA,OAAQ,IAAAD,EAAG,GAAEA,EAEPE,EAAe,SAACpB,GACpB,OAAOA,IAAQjB,GAAQiB,IAAQd,CACjC,EAEMmC,EAAgB,SAACrB,GACrB,OAAIe,EAAUO,SAAStB,GACdlB,EAELmC,EAAWK,SAAStB,GACflB,EAELqC,EAASG,SAAStB,GACblB,EAEFA,CACT,EAEA,OACEyC,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAAA,SAAgBC,SAC1BxC,EAAKyC,KAAI,SAACC,EAAQC,GAAC,OAClBP,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAAA,IAAWC,SACrBE,EAAOD,KAAI,SAAC5B,GAAG,OACduB,EAAAA,EAAAA,KAACQ,EAAAA,QAAS,CACRC,QAAS,kBAAMnB,EAAab,EAAI,EAChCiC,SAAUd,EAASG,SAAStB,GAE5ByB,MAAO,CACLC,EAAAA,IACAN,EAAapB,GAAO,CAAEV,MAAkB,IAAXF,GAAmB,CAAC,EACjD,CAAEgB,gBAAiBiB,EAAcrB,KACjC2B,UAEFJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAAA,QAAeC,SAAE3B,EAAImC,iBAP7BnC,EAQK,KACZ,OAdiC8B,EAe9B,KAIf,E,6mBC9BA,IAAMM,EAAwB,CAC5BC,eAAgB,EAChBC,QAAS,CACP,EAAG,CACDC,eAAgB,6BAChBC,OAAQ,6BACRC,OAAQ,6BACRC,MAAO,OACPC,KAAM,OACNC,QAAS,IACTC,MAAO,KACPC,UAAU,EACVC,cAAe,GACfC,MAAO,CAAE,EAAK,IAAK,EAAK,IAAK,IAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KAC9DC,WAAY,KACZC,SAAU,KACVC,WAAY,KACZC,YAAa,GAEf,EAAG,CACDb,eAAgB,6BAChBC,OAAQ,uCACRC,OAAQ,uCACRC,MAAO,OACPC,KAAM,gBACNC,QAAS,KACTC,MAAO,KACPC,UAAU,EACVC,cAAe,GACfC,MAAO,CAAE,EAAK,IAAK,EAAK,IAAK,IAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KAC9DC,WAAY,KACZC,SAAU,KACVC,WAAY,KACZC,YAAa,GAIf,EAAG,CACDb,eAAgB,6BAChBC,OAAQ,8GACRC,OAAQ,8GACRC,MAAO,WACPC,KAAM,gBACNC,QAAS,IACTC,MAAO,IACPC,UAAU,EACVC,cAAe,GACfC,MAAO,CAAE,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,IAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KAClFC,WAAY,KACZC,SAAU,KACVC,WAAY,KACZC,YAAa,GAEf,EAAG,CACDb,eAAgB,+BAChBC,OAAQ,qGACRC,OAAQ,qGACRC,MAAO,WACPC,KAAM,YACNC,QAAS,IACTC,MAAO,KACPC,UAAU,EACVC,cAAe,GACfC,MAAO,CAAC,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAK,EAAK,IAAI,IAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KAC9GC,WAAY,KACZC,SAAU,KACVC,WAAY,KACZC,YAAa,GAEf,EAAG,CAGDb,eAAgB,6BAChBC,OAAQ,kFACRC,OAAQ,kFACRC,MAAO,iBACPC,KAAM,gBACNC,QAAS,KACTC,MAAO,KACPC,UAAU,EACVC,cAAe,GACfC,MAAO,CAAC,EAAK,IAAK,EAAK,IAAK,EAAI,IAAI,IAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KACrEC,WAAY,KACZC,SAAU,KACVC,WAAY,KACZC,YAAa,GAGf,EAAG,CAEDb,eAAgB,6BAChBC,OAAQ,gFACRC,OAAQ,gFACRC,MAAO,QACPC,KAAM,WACNC,QAAS,IACTC,MAAO,IACPC,UAAU,EACVC,cAAe,GACfC,MAAO,CAAC,EAAK,IAAK,EAAK,IAAK,EAAI,IAAK,EAAI,IAAK,EAAI,IAAK,IAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,KACxFC,WAAY,KACZC,SAAU,KACVC,WAAY,KACZC,YAAa,KAebC,EAAW,SAAH1C,GAAA,IAAM2C,EAAY3C,EAAZ2C,aAAcC,EAAc5C,EAAd4C,eAAgBC,EAAe7C,EAAf6C,gBAAe,OAC/DC,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAACC,MAAOC,EAAOgC,SAAS/B,SAAA,EAC3BJ,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAAClC,MAAOC,EAAOkC,OAAQ5B,QAASuB,EAAe5B,UAC9DJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOmC,WAAWlC,SAAC,gBAGlC8B,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAACC,MAAOC,EAAOoC,eAAenC,SAAA,EACjCJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOqC,MAAMpC,SAAC,eAC3B8B,EAAAA,EAAAA,MAACvB,EAAAA,QAAI,CAACT,MAAOC,EAAO4B,aAAa3B,SAAA,CAAC,YAAU2B,EAAa,WAI3D/B,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAAClC,MAAOC,EAAOkC,OAAQ5B,QAASwB,EAAgB7B,UAC/DJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOmC,WAAWlC,SAAC,iBAG7B,EAKM,SAASqC,IAEvB,IAAAC,GAAoCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,SAAAH,EAAA,GAA3CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAE/BI,GAAsCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,SAAAG,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAElCG,GAAwCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,SAAAO,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAoDb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,SAAAW,EAAA,GAA5DE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAEjDG,GAAwCjB,EAAAA,EAAAA,UAAS,IAAGkB,GAAAhB,EAAAA,EAAAA,SAAAe,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA0CrB,EAAAA,EAAAA,UAAS,GAAEsB,GAAApB,EAAAA,EAAAA,SAAAmB,EAAA,GAA9CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAErCG,GAAwCzB,EAAAA,EAAAA,WAAS,GAAM0B,GAAAxB,EAAAA,EAAAA,SAAAuB,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAG9BG,EAAc1G,EAAAA,QAAAA,IAAe,UAAUC,MAGvC0G,EAAoBC,KAAKC,MAAMH,EADdrF,oBA0BjByF,EAAmB,SAACC,EAAKC,GAE7B,IAGMC,EAHQF,EAAIG,MAAM,KAGFF,EAAI,GAK1B,OAFcD,EAAII,QAAQF,EAG5B,GAoBAG,EAAAA,EAAAA,YAAU,WACRC,IACF,GAAG,KAKJD,EAAAA,EAAAA,YAAU,WACR,GAAIpC,EAAY,CACd,IAAMsC,EAAgBtC,EAAW/B,QAAQ+B,EAAWhC,gBACpDiD,EACEqB,EAAcnE,OACX+D,MAAM,IACN3E,KAAI,SAACgF,GAAI,OAAKD,EAAc3D,MAAM4D,IAAS,GAAG,IAC9CC,KAAK,KAET,IAAMC,EAAcH,EAAcnE,OAAO+D,MAAM,IAC/Cb,EAAiBqB,GAAeD,EAAaH,EAAc3D,OAC9D,CACF,GAAG,CAACqB,KAIHoC,EAAAA,EAAAA,YAAU,WACR,GAAoB,QAAhBO,EAAAA,QAAAA,GAIF,OADAC,OAAOC,iBAAiB,UAAWC,IAC5B,WACLF,OAAOG,oBAAoB,UAAWD,GACxC,CAEJ,GAAG,CAAC9C,EAAYgB,EAAcI,IAI9B,IACM0B,GAAgB,SAACE,GAErB,IAAMrH,EAAMqH,EAAMrH,IAAIsH,eAHP,6BAKFhG,SAAStB,IAAgB,cAARA,GACpB,MAARA,GAAuB,cAARA,GAA+B,eAARA,IAGpCa,GAAab,EAGnB,EAYM0G,GAAc,eAAAa,GAAAC,EAAAA,EAAAA,UAAG,YACrB,IACE,IAAMC,QAAmBC,EAAAA,QAAAA,QAAqB,cAC1CD,EACFnD,EAAcqD,KAAKC,MAAMH,KAEzBnD,EAAclC,GACdyF,GAAezF,GAEnB,CAAE,MAAO0F,GACPC,QAAQD,MAAM,6BAA8BA,EAC9C,CACF,IAAC,kBAZmB,OAAAP,EAAAS,MAAA,KAAAC,UAAA,KAedJ,GAAc,eAAAK,GAAAV,EAAAA,EAAAA,UAAG,UAAOW,GAC5B,UACQT,EAAAA,QAAAA,QAAqB,aAAcC,KAAKS,UAAUD,GAC1D,CAAE,MAAOL,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,CACF,IAAC,gBANmBO,GAAA,OAAAH,EAAAF,MAAA,KAAAC,UAAA,KA2HpB,IAAMK,GAA8B,SAACC,GACpC,IAAM5B,EAAgBtC,EAAW/B,QAAQ+B,EAAWhC,gBAC9CyE,EAAcH,EAAcnE,OAAO+D,MAAM,IACzCiC,EAAoBnD,EAAakB,MAAM,IAEtCkC,EAhQe,SAACC,EAAMC,GAO5B,IANA,IAAMC,EAAQF,EAAKnC,MAAM,KACnBsC,EAAQ,GACRC,EAAe,GACjBC,EAAcH,EAAM,GAGf9G,EAAI,EAAGA,EAAI8G,EAAMrJ,OAAQuC,IAC5BiH,EAAYxJ,OAASqJ,EAAM9G,GAAGvC,OAAS,GAAKoJ,EAC9CI,GAAe,IAAMH,EAAM9G,IAE3BgH,EAAaE,KAAKlH,GAClB+G,EAAMG,KAAKD,GACXA,EAAcH,EAAM9G,IAMxB,OAFA+G,EAAMG,KAAKD,GAEJD,CACT,CA4OoBG,CAAetC,EAAcnE,OAAQwD,GAIvD,IAAK,IAAMkD,KAAWT,EACtB,CACE,IAAIU,EAAKhD,EAAiBQ,EAAcnE,OAAQ0G,GAAW,EAC3DV,EAAkBW,GAAM,GAC1B,CAIA,IAAIC,EAAazC,EAAcnE,OAAOiD,GACfJ,EAAaI,GAWpC,OAPMkB,EAAc3D,MAAMoG,IAAgB3D,EAAgBqB,EAAYvH,QAElEmG,EAAiBD,EAAc,IAMjClE,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAO2H,UAAU1H,SAC3BmF,EAAYlF,KAAI,SAACgF,EAAM0C,GAItB,IAAMC,EAAS5C,EAAc3D,MAAM4D,GAC7B4C,EAAaF,IAAU7D,EACvBgE,EAAiC,OAAlBhE,GAA0BkB,EAAcnE,OAAOiD,KAAmBmB,EACjF8C,EAAcnB,EAAejH,SAASkH,EAAkBc,IACxDK,EAA4B,MAAT/C,EAAe,EAAI,EAE5C,OACErF,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAEf3B,QAAS,WACFuH,GACH7D,EAAiB4D,EAErB,EAAE3H,UAEF8B,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CACHC,MAAO,CACL3B,cAAe,SACfO,WAAY,SACZH,OAAQ,EACR0J,QAAS,EACTxJ,gBAAiBoJ,EACb,SAAWC,EACX,YAAc,cAClBtJ,aAAc,GACdwB,SAAA,EAGFJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CACHT,MAAO,CACLhB,WAAY,UACZoJ,cAAe,YACfnJ,SAAU,GACVH,MAAOgJ,EAAS,SAAW,QAC3B/I,WAAqB,SACrBsJ,WAAYH,EACZC,QAASD,GACThI,SAE4B,MAA7B6G,EAAkBc,GAAiB,IACH,MAA7Bd,EAAkBc,GAChB,OACDd,EAAkBc,MAKvBC,IACAhI,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CACHT,MAAO,CAELf,SAAU,GACVH,MAAOmJ,EAAc,MAAQ,OAC7B9J,WAAY,GACZY,WAAY,QAEZmB,SACH,OAKD4H,IAAUhI,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAO,CAEvBoI,cAAe,YACfnJ,SAAU,IACViB,SAAEiF,QA1DD0C,EAgEX,KAKP,EAGOC,GAAS,SAACD,GACd,IAAM3C,EAAgBtC,EAAW/B,QAAQ+B,EAAWhC,gBAC9C+G,EAAazC,EAAcnE,OAAO8G,GACxC,QAAS3C,EAAc3D,MAAMoG,EAC/B,EAoBMvI,GAAe,SAACb,GAGpB,IAAM2G,EAAgBtC,EAAW/B,QAAQ+B,EAAWhC,gBAC9CyE,EAAcH,EAAcnE,OAAO+D,MAAM,IACzCwD,EAAqBjD,EAAYrB,GAIvC,IAAGkB,EAAc7D,SAAjB,CAKA,IAAIkH,EAAYvE,EAChB,GAAU,cAAPzF,GAA8B,KAAPA,EAIxB,OAFAgK,GAAaA,EAAY,GAAKlD,EAAYvH,YAC1CmG,EAAiBsE,GAGnB,GAAU,aAAPhK,GAAsBA,GAAOjB,EAChC,CACE,GAAoB,GAAjB0G,EAGD,IADA,IACS3D,EADQgF,EAAYvH,OAAQ,EACduC,GAAK,EAAGA,IAE7B,IAAKyH,GAAOzH,GACZ,CACE4D,EAAiB5D,GACjB,KACF,CAGJ9B,EAAMjB,CACR,CACU,aAAPiB,IAEDA,EAAMd,GAKR,IAkBM+K,EAlBW5E,EAAakB,MAAM,IAAI3E,KAAI,SAACsI,EAAaZ,GACxD,OAAIxC,EAAYwC,KAAWS,GAAuBR,GAAOD,GAYlDY,EAXDlK,IAAQd,EAEH,IAEAc,IAAQjB,EAERmL,EAEFlK,CAIX,IAI8B6G,KAAK,IA2BnC,GA1BAvB,EAAgB2E,GA5SlB,SAAuB5E,EAAcsB,GACnC,OAAOtB,IAAiBsB,EAAclE,MACxC,CA+SM0H,CAAcF,EAActD,KAE9BrC,GAAc,SAAC8F,GACb,IAAMC,EAAcC,EAAAA,EAAA,GACfF,EAAS9H,SAAO,IAAArD,EAAAA,EAAAA,SAAA,GAClBmL,EAAS/H,eAAciI,EAAAA,EAAA,GACnBF,EAAS9H,QAAQ8H,EAAS/H,iBAAe,IAC5CS,UAAU,EACVI,UAAU,IAAIqH,MAAOC,kBAGzB,OAAAF,EAAAA,EAAA,GAAYF,GAAQ,IAAE9H,QAAS+H,GAEjC,IAEAvE,GAAgB,GAChB2E,YAAW,WACT3E,GAAgB,EAAQ,GAAG,MAI3B9F,GAAOd,EAGJ,GAAIc,IAAQjB,EAAM,CAGvB,IADA,IAAI2L,EAAmBjF,EAAgB,EAChCiF,GAAoB,GAAK/D,EAAc3D,MAAM2D,EAAcnE,OAAOkI,KACvEA,IAEEA,GAAoB,GACtBhF,EAAiBgF,EAErB,MAlW0B,SAACpB,GAC3B,IACMxC,EADgBzC,EAAW/B,QAAQ+B,EAAWhC,gBAClBG,OAAO+D,MAAM,IAC3CyD,EAAYV,EAGhB,GAAGjE,EAAa/D,SAAS,KAAK,CAC5B,GACE0I,GAAaA,EAAY,GAAKlD,EAAYvH,aAEV,KAA3B8F,EAAa2E,IAEpBtE,EAAiBsE,EACnB,CACF,CAsVIW,CAAoBlF,EA3FtB,CA8FF,EAEMmF,GAAiB,WACrBtG,GAAc,SAAC8F,GACb,OAAAE,EAAAA,EAAA,GAAYF,GAAQ,IAAE/H,eAAgB+H,EAAS9H,QAAQ+B,EAAWhC,gBAAgBe,aACpF,GACF,EAiIM2D,GAAiB,SAACD,EAAa9D,GACnC,IAAK,IAAIlB,EAAI,EAAGA,EAAIgF,EAAYvH,OAAQuC,IACtC,IAAKkB,EAAM8D,EAAYhF,IACrB,OAAOA,EAIX,OADAiG,QAAQ8C,IAAI,4CACJ,CACV,EA6BIC,GAAgB,EAOpB,OANiB,MAAdzG,IAEDyG,GAAgBzG,EAAWhC,iBAK3BoB,EAAAA,EAAAA,MAACsH,EAAAA,QAAY,CAACtJ,MAAOC,EAAOsJ,UAAUrJ,SAAA,EACpCJ,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAOuJ,kBAAkBtJ,UACpCJ,EAAAA,EAAAA,KAAC8B,EAAQ,CACPC,aAAcwH,GACdvH,eA3FmB,WAEzBuB,GAAgB,GAChBI,GAAsB,GACtBR,GAAgBD,EAClB,EAuFQjB,gBArFoB,WAC1BkB,GAAe,GACfQ,GAAsB,GACtBJ,GAAiBD,EACnB,OAmFItD,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAAAG,SACF8C,GACClD,EAAAA,EAAAA,MAlFgB,SAAH2J,GAAgD,IAA1CC,EAAeD,EAAfC,gBAAiB7I,EAAO4I,EAAP5I,QAAS8I,EAAQF,EAARE,SACnD,OACE7J,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAO2J,yBAAyB1J,SAC1C2J,OAAOnM,KAAKmD,GAASV,KAAI,SAAC5B,GAAG,OAC5BuB,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAEflC,MAAOC,EAAO6J,WACdvJ,QAAS,WAGHhC,IAAQmL,EACVC,EAASpL,GAIT0E,GAAe,EAEnB,EAAE/C,UAEF8B,EAAAA,EAAAA,MAACvB,EAAAA,QAAI,CAACT,MAAOC,EAAO8J,eAAe7J,SAAA,CAAC,UAC1B3B,EAAI,IAAEsC,EAAQtC,GAAK8C,SAAW,WAAa,OAfhD9C,EAiBY,KAI3B,GAwDwB,CACdmL,gBAAiBL,GACjBxI,QAAS+B,EAAW/B,QACpB8I,SAAU,SAAC9B,GApTI,IAACmC,IAqTGnC,EApT3BhF,GAAc,SAACoH,GACb,OAAApB,EAAAA,EAAA,GAAYoB,GAAc,IAAErJ,eAAgBoJ,GAC9C,IAoTU/G,GAAe,EACjB,IAGJG,GACEpB,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAACC,MAAOC,EAAOiK,aAAahK,SAAA,EAC/BJ,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAAClC,MAAOC,EAAOkK,SAAU5J,QAxDhC,WAClB,IAAM2E,EAAgBtC,EAAW/B,QAAQ+B,EAAWhC,gBAC9CyE,EAAcH,EAAcnE,OAAO+D,MAAM,IAC/Cb,EAAiBqB,GAAeD,EAAaH,EAAc3D,QAE3DsC,EACEqB,EAAcnE,OACX+D,MAAM,IACN3E,KAAI,SAACgF,GAAI,OAAKD,EAAc3D,MAAM4D,IAAS,GAAG,IAC9CC,KAAK,KAEV/B,GAAgB,EAElB,EA2CyEnD,UAC7DJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOmK,aAAalK,SAAC,aAEpCJ,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAAClC,MAAOC,EAAOkK,SAAU5J,QA5ChC,WAClBkD,GAAsB,GACxBJ,GAAgB,EAChB,EAyCyEnD,UAC7DJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOmK,aAAalK,SAAC,yBAGpCsD,GACF1D,EAAAA,EAAAA,KAACuK,EAAc,CAACC,QA5CC,WACvB7G,GAAsB,EAExB,KA2CQ3D,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAOsK,gBAAgBrK,SA1MvB,WACnB,IAAK0C,EAAY,OAAO,KAExB,IAAMsC,EAAgBtC,EAAW/B,QAAQ+B,EAAWhC,gBAE9CmG,EAAoBnD,EAAakB,MAAM,IAEvCpF,EAAWmK,OAAOW,OAAOtF,EAAc3D,OAEvCkJ,EAAa1D,EAAkB2D,QAAO,SAACC,EAAKxF,EAAM0C,GAQtD,OAPKnI,EAASG,SAASsF,KACjBwF,EAAIxF,GACNwF,EAAIxF,GAAMoC,KAAKM,GAEf8C,EAAIxF,GAAQ,CAAC0C,IAGV8C,CACT,GAAG,CAAC,GAEE7D,EAAiB+C,OAAOnM,KAAK+M,GAAYG,QAC7C,SAACzF,GACC,IAAM0F,EAAoBJ,EAAWtF,GAErC,OAD0B,IAAI2F,IAAID,EAAkB1K,KAAI,SAAA0H,GAAK,OAAI3C,EAAcnE,OAAO8G,EAAM,KACnEkD,KAAO,CAClC,IACAH,QAAO,SAAAzF,GAAI,MAAY,KAARA,CAAW,IAEtB6F,GAAcC,EAAAA,EAAAA,SAAI,IAAIH,IAAIlH,IAAegH,QAC7C,SAACzF,GAAI,OAAMzF,EAASG,SAASsF,KAAU2B,EAAejH,SAASsF,EAAK,IAItE,OACErF,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAOsJ,UAAUrJ,SAC3BgF,EAAc7D,UAGbW,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAAAG,SAAA,EAKHJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOiL,aAAahL,SAAEgF,EAAclE,UACjDgB,EAAAA,EAAAA,MAACvB,EAAAA,QAAI,CAACT,MAAOC,EAAOkL,gBAAgBjL,SAAA,CAAEgF,EAAchE,KAAK,IAAEgE,EAAc/D,QAAQ,IAAE+D,EAAc9D,UACjGtB,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAO,CAAC,CAAEnC,MAAO,MAAOY,OAAO,GAAIG,WAAW,WAAYsB,UAACJ,EAAAA,EAAAA,KAACsL,EAAAA,QAAM,CAAC9I,MAAM,oBAAoB/B,QAAS4I,OAC3G/E,IACCtE,EAAAA,EAAAA,KAACuL,EAAAA,QAAc,CACbC,MAAO,IACPC,OAAQ,CAAEC,EAAG,EAAGC,EAAG,GACnBC,SAAS,EACTC,eAAgB,EAChBC,UAAW,UAMjB5J,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAACC,MAAOC,EAAO4L,cAAc3L,SAAA,CAC/B2G,GAA4BC,IAE7B9E,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAACC,MAAOC,EAAO6L,eAAe5L,SAAA,EACjC8B,EAAAA,EAAAA,MAACvB,EAAAA,QAAI,CAACT,MAAOC,EAAO8L,SAAS7L,SAAA,CAAC,MAAIgF,EAAchE,SAChDc,EAAAA,EAAAA,MAACvB,EAAAA,QAAI,CAACT,MAAOC,EAAO8L,SAAS7L,SAAA,CAAC,YAAUgF,EAAcjE,MAAM,QAC5DnB,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAAAP,SAAC,UAGRJ,EAAAA,EAAAA,KAACC,EAAAA,QAAI,CAACC,MAAOC,EAAO+L,kBAAkB9L,UACpCJ,EAAAA,EAAAA,KAACmM,EAAQ,CACT7M,aAAcA,GACdM,SAAUA,EACVF,WAAYsH,EACZxH,UAAW0L,UASvB,CA0HSkB,SAOX,CAEA,IAAM7B,EAAiB,SAAH8B,GAAA,IAAM7B,EAAO6B,EAAP7B,QAAO,OAC/BtI,EAAAA,EAAAA,MAACjC,EAAAA,QAAI,CAACC,MAAOC,EAAOmM,eAAelM,SAAA,EACjCJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOoM,WAAWnM,SAAC,qBAChCJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOmM,eAAelM,SAAC,uJAGpCJ,EAAAA,EAAAA,KAACoC,EAAAA,QAAgB,CAAClC,MAAOC,EAAOqM,YAAa/L,QAAS+J,EAAQpK,UAC5DJ,EAAAA,EAAAA,KAACW,EAAAA,QAAI,CAACT,MAAOC,EAAOsM,gBAAgBrM,SAAC,cAElC,EAGHD,EAASjC,EAAAA,QAAAA,OAAkB,CAQ/BuL,UAAW,CAETiD,KAAM,EAIN7N,gBAAiB,WAEnBsD,SAAU,CACR5D,cAAe,MACfC,eAAgB,gBAChBK,gBAAiB,UACjBC,WAAY,SAEZ6N,WAAY,GACZC,cAAe,GACfC,aAAc,GAEdF,WAAY,GACZD,KAAM,GAIRnK,eAAgB,CAIhB,EACAC,MAAO,CACLtD,WAAY,UACZF,MAAO,QACPG,SAAU,GACVF,WAAY,OACZ6N,eAAgB,EAChBtO,eAAgB,UAElBuD,aAAc,CACZ4K,WAAY,GAEZI,UAAW,SACX9N,WAAY,OACZD,MAAO,QACPG,SAAU,GACVX,eAAgB,SAChB+J,WAAY,IAGd6B,aAAc,CACZnL,WAAY,QAQdwC,MAAO,CACLxC,WAAY,OACZb,UAAW,UAGXe,SAAU,GACV2N,eAAgB,EAChBtO,eAAgB,QAChBM,WAAY,SAEduD,OAAQ,CACNrD,MAAOzB,EACP8K,QAAS,GAETjK,UAAW,WAEbkE,WAAY,CACVrD,WAAY,OACZ0N,WAAY,GACZI,UAAW,SAEX/N,MAAO,QACPG,SAAU,IAGZkL,SAAU,CACR2C,YAAY,IAGd1C,aAAc,CACZqC,WAAW,GAEXI,UAAW,SACX5N,SAAU,IAEZmN,eAAgB,CACdjE,QAAS,GACTjK,UAAW,UACXsO,KAAM,GAKRH,WAAY,CACVpN,SAAU,GACVF,WAAY,OACZgO,aAAc,IAEhBC,UAAW,CACT/N,SAAU,GACVgO,UAAW,UACXF,aAAc,IAEhBT,YAAa,CACX3N,gBAAiB,UACjBd,MAAO,GACPqP,kBAAmB,EACnBC,gBAAiB,EACjBzO,aAAc,EACdE,WAAY,UAEd2N,gBAAiB,CAEftN,SAAU,GACVH,MAAO,SAETyL,gBAAiB,CACfrM,UAAW,UACXkP,eAAgB,GAChB/O,cAAe,OAMjByN,eAAgB,CACd5N,UAAW,UACXkP,eAAgB,GAChBnO,SAAU,GACV0N,aAAc,GACdM,UAAW,SAEbI,QAAS,CAOT,EACAC,WAAY,CAKZ,EACA1F,UAAW,CACTvJ,cAAe,MACfkP,SAAU,OACVpF,QAAS,IAEX4D,SAAU,CACR9M,SAAU,GACV0N,aAAc,GACdE,UAAW,SACX7N,WAAY,UACZF,MAAO,OACPmO,UAAW,SAEb/B,aAAc,CACZ/C,QAAS,GAETlJ,SAAU,GACVmJ,cAAe,cAEjB+C,gBAAiB,CACfwB,aAAc,GACdD,cAAe,GAEfzN,SAAU,GACV4N,UAAW,SACXzE,cAAe,aACf6E,UAAW,SAEbjB,kBAAmB,CACjB7D,QAAS,K,GCxkCTqF,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUM,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAGpEK,EAAOD,OACf,CAGAJ,EAAoBQ,EAAIF,E,MCzBxB,IAAIG,EAAW,GACfT,EAAoBU,EAAI,CAACC,EAAQC,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASpO,EAAI,EAAGA,EAAI6N,EAASpQ,OAAQuC,IAAK,CAGzC,IAFA,IAAKgO,EAAUC,EAAIC,GAAYL,EAAS7N,GACpCqO,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAASvQ,OAAQ6Q,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAa1E,OAAOnM,KAAK+P,EAAoBU,GAAGS,OAAOrQ,GAASkP,EAAoBU,EAAE5P,GAAK8P,EAASM,MAC9IN,EAASQ,OAAOF,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbR,EAASW,OAAOxO,IAAK,GACrB,IAAIyO,EAAIR,SACEV,IAANkB,IAAiBV,EAASU,EAC/B,CACD,CACA,OAAOV,CAnBP,CAJCG,EAAWA,GAAY,EACvB,IAAI,IAAIlO,EAAI6N,EAASpQ,OAAQuC,EAAI,GAAK6N,EAAS7N,EAAI,GAAG,GAAKkO,EAAUlO,IAAK6N,EAAS7N,GAAK6N,EAAS7N,EAAI,GACrG6N,EAAS7N,GAAK,CAACgO,EAAUC,EAAIC,EAqBjB,C,KCzBdd,EAAoB7I,EAAKkJ,IACxB,IAAIiB,EAASjB,GAAUA,EAAOkB,WAC7B,IAAOlB,EAAiB,QACxB,IAAM,EAEP,OADAL,EAAoBwB,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdtB,EAAoBwB,EAAI,CAACpB,EAASsB,KACjC,IAAI,IAAI5Q,KAAO4Q,EACX1B,EAAoB2B,EAAED,EAAY5Q,KAASkP,EAAoB2B,EAAEvB,EAAStP,IAC5EsL,OAAOwF,eAAexB,EAAStP,EAAK,CAAE+Q,YAAY,EAAMC,IAAKJ,EAAW5Q,IAE1E,ECNDkP,EAAoB+B,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,kBAAXpK,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBiI,EAAoB2B,EAAI,CAACS,EAAKC,IAAUjG,OAAOkG,UAAUC,eAAehC,KAAK6B,EAAKC,GCClFrC,EAAoBqB,EAAKjB,IACH,qBAAXoC,QAA0BA,OAAOC,aAC1CrG,OAAOwF,eAAexB,EAASoC,OAAOC,YAAa,CAAEC,MAAO,WAE7DtG,OAAOwF,eAAexB,EAAS,aAAc,CAAEsC,OAAO,GAAO,E,MCA9D,IAAIC,EAAkB,CACrB,IAAK,GAaN3C,EAAoBU,EAAEQ,EAAK0B,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4B7J,KACvD,IAGIgH,EAAU2C,GAHThC,EAAUmC,EAAaC,GAAW/J,EAGhBrG,EAAI,EAC3B,GAAGgO,EAASqC,MAAMC,GAAgC,IAAxBP,EAAgBO,KAAa,CACtD,IAAIjD,KAAY8C,EACZ/C,EAAoB2B,EAAEoB,EAAa9C,KACrCD,EAAoBQ,EAAEP,GAAY8C,EAAY9C,IAGhD,GAAG+C,EAAS,IAAIrC,EAASqC,EAAQhD,EAClC,CAEA,IADG8C,GAA4BA,EAA2B7J,GACrDrG,EAAIgO,EAASvQ,OAAQuC,IACzBgQ,EAAUhC,EAAShO,GAChBoN,EAAoB2B,EAAEgB,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO5C,EAAoBU,EAAEC,EAAO,EAGjCwC,EAAqBC,KAAsB,gBAAIA,KAAsB,iBAAK,GAC9ED,EAAmBE,QAAQR,EAAqBS,KAAK,KAAM,IAC3DH,EAAmBrJ,KAAO+I,EAAqBS,KAAK,KAAMH,EAAmBrJ,KAAKwJ,KAAKH,G,KC7CvF,IAAII,EAAsBvD,EAAoBU,OAAEP,EAAW,CAAC,MAAM,IAAOH,EAAoB,QAC7FuD,EAAsBvD,EAAoBU,EAAE6C,E","sources":["src/constants.js","src/components/Keyboard/Keyboard.styles.js","src/components/Keyboard/Keyboard.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["export const colors = {\n  black: \"#121214\",\n  darkgrey: \"#3A3A3D\",\n  grey: \"#818384\",\n  lightgrey: \"#D7DADC\",\n  primary: \"#538D4E\",\n  secondary: \"#B59F3B\",\n};\n\nexport const colorsToEmoji = {\n  [colors.darkgrey]: \"⬛\",\n  [colors.primary]: \"🟩\",\n  [colors.secondary]: \"🟧\",\n};\n\nexport const LEFT = \"LEFT\";\nexport const CLEAR = \"DEL\";\n\nexport const keys = [\n  [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n  [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"],\n  [LEFT, \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", CLEAR],\n];\n","import { StyleSheet, Dimensions } from \"react-native\";\nimport { keys, colors } from \"../../constants\";\n\nconst screenWidth = Dimensions.get(\"window\").width;\nexport const keyWidth = (screenWidth - 10) / keys[0].length;\nconst keyHeight = keyWidth * 1.3;\n\nexport default StyleSheet.create({\n  keyboard: {\n    alignSelf: \"stretch\",\n    marginTop: \"auto\",\n  },\n  row: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  key: {\n    width: keyWidth - 7,\n    height: keyHeight - 10,\n    margin: 3,\n    borderRadius: 3,\n    backgroundColor: colors.grey,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  keyText: {\n    color: colors.lightgrey,\n    fontWeight: \"bold\",\n    fontFamily: 'Verdana',\n    fontSize: 13,\n  },\n});\n","import { View, Text, Pressable } from \"react-native\";\nimport { keys, LEFT, CLEAR, colors } from \"../../constants\";\nimport styles, { keyWidth } from \"./Keyboard.styles\";\n\nconst Keyboard = ({\n  onKeyPressed = () => {},\n  greenCaps = [],\n  yellowCaps = [],\n  greyCaps = [],\n}) => {\n  const isLongButton = (key) => {\n    return key === LEFT || key === CLEAR;\n  };\n\n  const getKeyBGColor = (key) => {\n    if (greenCaps.includes(key)) {\n      return colors.primary;\n    }\n    if (yellowCaps.includes(key)) {\n      return colors.secondary;\n    }\n    if (greyCaps.includes(key)) {\n      return colors.darkgrey;\n    }\n    return colors.grey;\n  };\n\n  return (\n    <View style={styles.keyboard}>\n      {keys.map((keyRow, i) => (\n        <View style={styles.row} key={`row-${i}`}>\n          {keyRow.map((key) => (\n            <Pressable\n              onPress={() => onKeyPressed(key)}\n              disabled={greyCaps.includes(key)}\n              key={key}\n              style={[\n                styles.key,\n                isLongButton(key) ? { width: keyWidth * 1.3 } : {},\n                { backgroundColor: getKeyBGColor(key) },\n              ]}\n            >\n              <Text style={styles.keyText}>{key.toUpperCase()}</Text>\n            </Pressable>\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nexport default Keyboard;\n","import { useEffect, useState, useRef } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, SafeAreaView, Button, ScrollView, TouchableOpacity, Alert, Dimensions, Platform } from 'react-native';\nimport { colors, CLEAR, LEFT, colorsToEmoji } from \"./src/constants\";\nimport Keyboard from \"./src/components/Keyboard\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Clipboard from \"expo-clipboard\";\nimport { useFonts } from 'expo-font';\nimport ConfettiCannon from 'react-native-confetti-cannon';\n\n// import * as SplashScreen from 'expo-splash-screen';\n\n\n// “So whether you eat or drink or whatever you do, do it all for the glory of God.”\n// 1 corinthian 10:31 ni\n\n// “just as the Son of Man did not come to be served, but to serve, and to give his life as a ransom for many.””\n// matthew 20:28 niv\n\nconst puzzle_data_structure = {\n  current_puzzle: 1,\n  puzzles: {\n    1: {\n      ciphersequence: \"hqjuibmswaynpreovtfdczxlgk\",\n      cipher: 'bet meu fe neziu dsi xetnu',\n      phrase: 'for god so loved the world',\n      topic: 'Love',\n      book: 'John',\n      chapter: \"3\",\n      verse: \"16\",\n      isSolved: false,\n      current_state: '',\n      hints: { 'e': 'o', 'u': 'd', ' ':' ', '!': '!', '.': '.', ',':',' ,}, // Key-value pairs for the given hints\n      start_time: null, // The timestamp when the user started the puzzle\n      end_time: null, // The timestamp when the user solved the puzzle\n      time_taken: null, // The time taken by the user to solve the puzzle (in seconds)\n      next_puzzle: 2, // The ID of the next puzzle\n    },\n    2: {\n      ciphersequence: \"hqjuibmswaynpreovtfdczxlgk\",\n      cipher: 'nid hnn dshd gec ue qi ueri wr nezi.',\n      phrase: 'let all that you do be done in love.',\n      topic: 'Love',\n      book: '1 Corinthians',\n      chapter: \"16\",\n      verse: \"14\",\n      isSolved: false,\n      current_state: '',\n      hints: { 'n': 'l', 'r': 'n', ' ':' ', '!': '!', '.': '.', ',':',' ,}, // Key-value pairs for the given hints\n      start_time: null, // The timestamp when the user started the puzzle\n      end_time: null, // The timestamp when the user solved the puzzle\n      time_taken: null, // The time taken by the user to solve the puzzle (in seconds)\n      next_puzzle: 3, // The ID of the next puzzle\n    },\n    // Add more puzzles here\n\n    3: {\n      ciphersequence: \"hqjuibmswaynpreovtfdczxlgk\",\n      cipher: 'ue redswrm btep finbwfs hpqwdwer et jerjiwd, qcd wr scpwnwdg jecrd edsitf peti fwmrwbwjhrd dshr gectfinzif.',\n      phrase: 'do nothing from selfish ambition or conceit, but in humility count others more significant than yourselves.',\n      topic: 'Humility',\n      book: 'Philippians 2',\n      chapter: \"2\",\n      verse: \"3\",\n      isSolved: false,\n      current_state: '',\n      hints: { 'r': 'n', 'm': 'g', 'f': 's', 'w': 'i', ' ':' ', '!': '!', '.': '.', ',':',' ,}, // Key-value pairs for the given hints\n      start_time: null, // The timestamp when the user started the puzzle\n      end_time: null, // The timestamp when the user solved the puzzle\n      time_taken: null, // The time taken by the user to solve the puzzle (in seconds)\n      next_puzzle: 4, // The ID of the next puzzle\n    },\n    4: {\n      ciphersequence: \"'mwtohslqrcyinkdjfpuvagebxz'\",\n      cipher: 'wh yrko mko tdnjmuurdkmvh vd dkh mkdvqhp, sdplrgrkl hmtq dvqhp, cauv mu rk tqpruv ldo sdplmgh xda.',\n      phrase: 'be kind and compassionate to one another, forgiving each other, just as in christ god forgave you.',\n      topic: 'kindness',\n      book: 'Ephesians',\n      chapter: \"4\",\n      verse: \"32\",\n      isSolved: false,\n      current_state: '',\n      hints: {'o': 'd', 'y': 'k', 'r': 'i', 'u': 's', 't': 'c', 'g': 'v', 'd': 'o',' ':' ', '!': '!', '.': '.', ',':',' ,}, // Key-value pairs for the given hints\n      start_time: null, // The timestamp when the user started the puzzle\n      end_time: null, // The timestamp when the user solved the puzzle\n      time_taken: null, // The time taken by the user to solve the puzzle (in seconds)\n      next_puzzle: 5, // The ID of the next puzzle\n    },\n    5: {\n      //// “So whether you eat or drink or whatever you do, do it all for the glory of God.”\n      // 1 corinthian 10:31 niv\n      ciphersequence: \"knrwyshjaecbpqmiutoxfzldvg\",\n      cipher: 'om ljyxjyt vmf ykx mt wtaqc mt ljkxyzyt vmf wm, wm ax kbb smt xjy hbmtv ms hmw.',\n      phrase: 'so whether you eat or drink or whatever you do, do it all for the glory of god.',\n      topic: 'Glorifying God',\n      book: '1 Corinthians',\n      chapter: \"10\",\n      verse: \"31\",\n      isSolved: false,\n      current_state: '',\n      hints: {'o': 's', 'y': 'e', 'c':'k',' ':' ', '!': '!', '.': '.', ',':',' ,}, // Key-value pairs for the given hints\n      start_time: null, // The timestamp when the user started the puzzle\n      end_time: null, // The timestamp when the user solved the puzzle\n      time_taken: null, // The time taken by the user to solve the puzzle (in seconds)\n      next_puzzle: 1, // The ID of the next puzzle\n    },\n\n    6: {\n      // trust in the lord with all your heart and lean not on your own understanding\n      ciphersequence: \"hqmeraygjiudskntpoxcfwlvbz\",\n      cipher: 'cofxc jk cgr dnoe ljcg hdd bnfo grhoc hke drhk knc nk bnfo nlk fkeroxchkejky.',\n      phrase: 'trust in the lord with all your heart and lean not on your own understanding.',\n      topic: 'trust',\n      book: 'Proverbs',\n      chapter: \"3\",\n      verse: \"5\",\n      isSolved: false,\n      current_state: '',\n      hints: {'f': 'u', 'n': 'o', 'h':'a', 'c':'t', 'e':'d', ' ':' ', '!': '!', '.': '.', ',':',' ,}, // Key-value pairs for the given hints\n      start_time: null, // The timestamp when the user started the puzzle\n      end_time: null, // The timestamp when the user solved the puzzle\n      time_taken: null, // The time taken by the user to solve the puzzle (in seconds)\n      next_puzzle: 1, // The ID of the next puzzle\n    },\n\n    // Add more puzzles here\n  \n}};\n\n\n\n\n\nconst copyArray = (arr) => {\n  return [...arr.map((rows) => [...rows])];\n};\n\nconst TitleBar = ({ puzzleNumber, onPuzzlesPress, onSettingsPress }) => (\n  <View style={styles.titleBar}>\n    <TouchableOpacity style={styles.button} onPress={onPuzzlesPress}>\n      <Text style={styles.buttonText}> Puzzles</Text>\n    </TouchableOpacity>\n \n    <View style={styles.titleContainer}>\n      <Text style={styles.title}>Biblegram</Text>\n      <Text style={styles.puzzleNumber}> Puzzle #{puzzleNumber} </Text>\n    </View>\n\n\n    <TouchableOpacity style={styles.button} onPress={onSettingsPress}>\n      <Text style={styles.buttonText}>Settings</Text>\n    </TouchableOpacity>\n   \n  </View>\n);\n\n\n\nexport default function App() {\n\n\tconst [puzzleData, setPuzzleData] = useState(null);\n\n  const [showPuzzles, setShowPuzzles] = useState(false);\n\n  const [showSettings, setShowSettings] = useState(false);\n  const [showAboutBiblegram, setShowAboutBiblegram] = useState(false);\n\n\tconst [currentState, setCurrentState] = useState('');\n\tconst [selectedIndex, setSelectedIndex] = useState(0);\n\n  const [showConfetti, setShowConfetti] = useState(false);\n  \n  \n  const screenWidth = Dimensions.get('window').width;\n  const fontSize = 18; // Set the font size of the text here\n  const characterWidth = fontSize * 0.6; // A rough estimate for character width; adjust as needed\n  const charactersPerLine = Math.floor(screenWidth / characterWidth); \n\n  //const lines = splitIntoLines(verse, maxCharsPerLine);\n  const splitIntoLines = (text, maxLineLength) => {\n    const words = text.split(\" \");\n    const lines = [];\n    const newLineIndex = [];\n    let currentLine = words[0];\n    \n  \n    for (let i = 1; i < words.length; i++) {\n      if (currentLine.length + words[i].length + 1 <= maxLineLength) {\n        currentLine += \" \" + words[i];\n      } else {\n        newLineIndex.push(i);\n        lines.push(currentLine);\n        currentLine = words[i];\n      }\n    }\n    //newLineIndex.push(i);\n    lines.push(currentLine); // add the last line\n  \n    return newLineIndex;\n  };\n  \n  const findNthWordIndex = (str, n) => {\n    // Split the string into an array of words\n    const words = str.split(' ');\n  \n    // Get the nth word\n    const nthWord = words[n - 1];\n  \n    // Find the index of the nth word in the original string\n    const index = str.indexOf(nthWord);\n  \n    return index;\n  }\n  \n\n  const findFirstNonHintIndex = () => {\n    \n    const currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    const cipherChars = currentPuzzle.cipher.split('');\n  \n    for (let i = 0; i < cipherChars.length; i++) {\n      if (!currentPuzzle.hints[cipherChars[i]]) {\n        return i;\n      }\n    }\n  \n    return null;\n  };\n\n  //const onKeyPressedRef = useRef();\n\n  \n  useEffect(() => {\n    loadPuzzleData();\n  }, []);\n\n\n  \n\n\tuseEffect(() => {\n  \tif (puzzleData) {\n    \tconst currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    \tsetCurrentState(\n      \tcurrentPuzzle.cipher\n        \t.split('')\n        \t.map((char) => currentPuzzle.hints[char] || '_')\n        \t.join('')\n    \t);\n      const cipherChars = currentPuzzle.cipher.split('');\n      setSelectedIndex(findFirstIndex(cipherChars, currentPuzzle.hints));\n  \t}\n\t}, [puzzleData]);\n\n\n\n  useEffect(() => {\n    if (Platform.OS === 'web')\n    {\n    //console.log(\"qweqe \"); console.log(puzzleData);\n      window.addEventListener('keydown', handleKeyDown);\n      return () => {\n        window.removeEventListener('keydown', handleKeyDown);\n      };\n    }\n  }, [puzzleData, currentState, selectedIndex]);\n  \n\n\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const handleKeyDown = (event) => {\n    \n    const key = event.key.toLowerCase();\n    \n    if (alphabet.includes(key) || key === 'backspace' ||\n      key === ' ' || key === \"arrowleft\" || key === \"arrowright\") {\n        //console.log(key)\n        \n        onKeyPressed(key);\n      //onKeyPressedRef.current(key);\n    }\n  };\n  \n\n\tconst updateCurrentState = (newChar) => {\n    //console.log(\"hi\");\n  \tconst currentStateChars = currentState.split('');\n  \tif (!currentPuzzle.hints[currentPuzzle.cipher[selectedIndex]]) {\n    \tcurrentStateChars[selectedIndex] = newChar;\n    \tsetCurrentState(currentStateChars.join(''));\n  \t}\n\t};\n\n  const loadPuzzleData = async () => {\n    try {\n      const storedData = await AsyncStorage.getItem(\"puzzleData\");\n      if (storedData) {\n        setPuzzleData(JSON.parse(storedData));\n      } else {\n        setPuzzleData(puzzle_data_structure);\n        savePuzzleData(puzzle_data_structure);\n      }\n    } catch (error) {\n      console.error(\"Error loading puzzle data:\", error);\n    }\n  };\n  \n\n  const savePuzzleData = async (data) => {\n    try {\n      await AsyncStorage.setItem(\"puzzleData\", JSON.stringify(data));\n    } catch (error) {\n      console.error(\"Error saving puzzle data:\", error);\n    }\n  };\n\n  \n  const setNextNonHintIndex = (index) => {\n    const currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    const cipherChars = currentPuzzle.cipher.split('');\n    let nextIndex = index;\n   \n    \n    if(currentState.includes(\"_\")){\n      do {\n        nextIndex = (nextIndex + 1) % cipherChars.length;\n      } //while (currentPuzzle.hints[cipherChars[nextIndex]] && currentState[nextIndex != \"_\"]);\n      while (currentState[nextIndex] != \"_\");\n      //console.log(nextIndex);\n      setSelectedIndex(nextIndex);\n    }\n  };\n\n  function checkIfSolved(currentState, currentPuzzle) {\n    return currentState === currentPuzzle.phrase;\n  }\n  \n/* \n\tconst renderCipherAndCurrentState = (duplicateChars) => {\n  \tconst currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n  \tconst cipherChars = currentPuzzle.cipher.split('');\n  \tconst currentStateChars = currentState.split('');\n\n\n    let cipherChar = currentPuzzle.cipher[selectedIndex];\n    let currentStateChar = currentState[selectedIndex];\n \n    if (!!currentPuzzle.hints[cipherChar]  && selectedIndex < cipherChars.length)\n    {\n        setSelectedIndex(selectedIndex+1); \n    } \n    \n    //\n\n    return (\n      <View style={styles.inputText}>\n        {cipherChars.map((char, index) => {\n          const isHint = currentPuzzle.hints[char];\n          const isSelected = index === selectedIndex;\n          const isSameCipher = selectedIndex !== null && currentPuzzle.cipher[selectedIndex] === char;\n          const isDuplicate = duplicateChars.includes(currentStateChars[index]);\n          const additionalMargin = char === ' ' ? 8 : 0;\n\n          return (\n            <TouchableOpacity\n              key={index}\n              onPress={() => {\n                if (!isHint) {\n                  setSelectedIndex(index);\n                }\n              }}\n            >\n              <View\n                style={{\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  margin: 2,\n                  padding: 2,\n                  backgroundColor: isSelected\n                    ? 'orange' : isSameCipher\n                    ? 'lightcyan' : 'transparent',\n                  borderRadius: 3,\n                }}\n              >\n               \n                <Text\n                  style={{\n                    fontFamily: 'Verdana',\n                    textTransform: 'uppercase',\n                    fontSize: 18,\n                    color: isHint ? 'normal' : 'black',\n                    fontWeight: isHint ? 'normal' : 'normal',\n                    marginLeft: additionalMargin,\n                    padding: additionalMargin,\n                  }}\n                >\n                  {currentStateChars[index] === \"_\" ? \" \" : currentStateChars[index]}\n                </Text>\n               \n                {!isHint && (\n                  <Text\n                    style={{\n                      //fontFamily: 'Verdana',\n                      fontSize: 18,\n                      color: isDuplicate ? 'red' : 'gray',\n                      marginTop: -17,\n                      fontWeight: 'bold',\n                      //margin: 2,\n                    }}\n                  >\n                     _\n                  </Text>\n                )}\n\n                {!isHint && <Text style={{ \n                  //fontFamily: 'Verdana',\n                  textTransform: 'uppercase',\n                  fontSize: 15\n                }}>{char}</Text>}\n              </View>\n            </TouchableOpacity>\n          );\n          \n          \n        })\n        }\n      </View>\n    );\n\n\t}; */\n\n  const renderCipherAndCurrentState = (duplicateChars) => {\n  \tconst currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n  \tconst cipherChars = currentPuzzle.cipher.split('');\n  \tconst currentStateChars = currentState.split('');\n\n    const splitHere = splitIntoLines(currentPuzzle.cipher, charactersPerLine);\n    \n    //console.log(currentStateChars);\n    //console.log(splitHere);\n    for( const brIndex of splitHere)\n    {\n      let br = findNthWordIndex(currentPuzzle.cipher, brIndex) - 1;\n      currentStateChars[br] = \"*\"\n    }\n\n    //console.log(currentStateChars);\n\n    let cipherChar = currentPuzzle.cipher[selectedIndex];\n    let currentStateChar = currentState[selectedIndex];\n\n\n \n    if (!!currentPuzzle.hints[cipherChar]  && selectedIndex < cipherChars.length)\n    {\n        setSelectedIndex(selectedIndex+1); \n    } \n    //{renderCipherAndCurrentState(duplicateChars)}\n    //\n\n    return (\n      <View style={styles.inputText}>\n        {cipherChars.map((char, index) => {\n          //console.log(cipherChars);\n          //console.log(index);\n          //console.log(test);\n          const isHint = currentPuzzle.hints[char];\n          const isSelected = index === selectedIndex;\n          const isSameCipher = selectedIndex !== null && currentPuzzle.cipher[selectedIndex] === char;\n          const isDuplicate = duplicateChars.includes(currentStateChars[index]);\n          const additionalMargin = char === ' ' ? 8 : 0;\n\n          return (\n            <TouchableOpacity\n              key={index}\n              onPress={() => {\n                if (!isHint) {\n                  setSelectedIndex(index);\n                }\n              }}\n            >\n              <View\n                style={{\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  margin: 2,\n                  padding: 2,\n                  backgroundColor: isSelected\n                    ? 'orange' : isSameCipher\n                    ? 'lightcyan' : 'transparent',\n                  borderRadius: 3,\n                }}\n              >\n               \n                <Text\n                  style={{\n                    fontFamily: 'Verdana',\n                    textTransform: 'uppercase',\n                    fontSize: 18,\n                    color: isHint ? 'normal' : 'black',\n                    fontWeight: isHint ? 'normal' : 'normal',\n                    marginLeft: additionalMargin,\n                    padding: additionalMargin,\n                  }}\n                >\n                  {currentStateChars[index] === \"_\" ? \" \" \n                    : currentStateChars[index] === \"*\" \n                      ? \"\\n\\n\"\n                      :currentStateChars[index]}\n                </Text>\n\n  \n               \n                {!isHint && (\n                  <Text\n                    style={{\n                      //fontFamily: 'Verdana',\n                      fontSize: 18,\n                      color: isDuplicate ? 'red' : 'gray',\n                      marginTop: -17,\n                      fontWeight: 'bold',\n                      //margin: 2,\n                    }}\n                  >\n                     _\n                  </Text>\n                )}\n\n                {!isHint && <Text style={{ \n                  //fontFamily: 'Verdana',\n                  textTransform: 'uppercase',\n                  fontSize: 15\n                }}>{char}</Text>}\n              </View>\n            </TouchableOpacity>\n          );\n          \n          \n        })\n        }\n      </View>\n    );\n\n\t};\n\n\n  const isHint = (index) => {\n    const currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    const cipherChar = currentPuzzle.cipher[index];\n    return !!currentPuzzle.hints[cipherChar];\n  };\n\n  const setPuzzleAsSolved = (puzzleId) => {\n    setPuzzleData((prevPuzzleData) => {\n      const updatedPuzzles = { ...prevPuzzleData.puzzles };\n      updatedPuzzles[puzzleId].isSolved = true;\n      return { ...prevPuzzleData, puzzles: updatedPuzzles };\n    });\n  };\n\n  const setCurrentPuzzle = (puzzleId) => {\n    setPuzzleData((prevPuzzleData) => {\n      return { ...prevPuzzleData, current_puzzle: puzzleId };\n    });\n  };\n  \n  \n\n  \n\n  const onKeyPressed = (key) => {\n\n    \n    const currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    const cipherChars = currentPuzzle.cipher.split('');\n    const selectedCipherChar = cipherChars[selectedIndex];\n    //console.log(\"238 \"+ currentPuzzle);\n    // if game is already over\n    //console.log(\"zxc \" + currentPuzzle[\"isSolved\"]); \n    if(currentPuzzle.isSolved)\n    {\n      return;\n    }\n\n    let nextIndex = selectedIndex;\n    if(key == \"arrowright\" || key == \" \")\n    {\n      nextIndex = (nextIndex + 1) % cipherChars.length;\n      setSelectedIndex(nextIndex);\n      return;\n    }\n    if(key == \"arrowleft\" || key == LEFT)\n    {\n      if(selectedIndex == 0)\n      {\n        const maxIndex = cipherChars.length -1 ;\n        for (let i = maxIndex; i >= 0; i--)\n        {\n          if (!isHint(i))\n          {\n            setSelectedIndex(i);\n            break;\n          }\n        }\n      }\n      key = LEFT;\n    }\n    if(key == \"backspace\")\n    {\n      key = CLEAR\n    }\n \n\n    \n    const newState = currentState.split('').map((currentChar, index) => {\n      if (cipherChars[index] === selectedCipherChar && !isHint(index)) {\n        if (key === CLEAR)\n        {\n          return \"_\";\n        } \n        else if (key === LEFT) \n        {\n          return currentChar;\n        }\n        return key;\n      }\n     \n      return currentChar;\n    });\n    \n \n    //console.log(newState);\n    const newStateJoin = newState.join('');\n    setCurrentState(newStateJoin);\n  \n\n \n      // Check if the puzzle is solved\n    if (checkIfSolved(newStateJoin, currentPuzzle)) {\n      //console.log(\"is solved \");\n      setPuzzleData((prevData) => {\n        const updatedPuzzles = {\n          ...prevData.puzzles,\n          [prevData.current_puzzle]: {\n            ...prevData.puzzles[prevData.current_puzzle],\n            isSolved: true,\n            end_time: new Date().toISOString(),\n          },\n        };\n        return { ...prevData, puzzles: updatedPuzzles };\n\n      });\n      //alert('Puzzle solved!');\n      setShowConfetti(true)\n      setTimeout(() => {\n        setShowConfetti(false); }, 20000)\n    // You can add additional logic here, e.g., updating the puzzle data, moving to the next puzzle, etc.\n    }\n    //console.log(\"solved \" +currentPuzzle.isSolved);\n    if (key == CLEAR)\n    {\n      return;\n    } else if (key === LEFT) {\n      // Move the selected index back a space if it is in bounds and not a hint\n      let newSelectedIndex = selectedIndex - 1;\n      while (newSelectedIndex >= 0 && currentPuzzle.hints[currentPuzzle.cipher[newSelectedIndex]]) {\n        newSelectedIndex--;\n      } \n      if (newSelectedIndex >= 0) {\n        setSelectedIndex(newSelectedIndex);\n      }\n    } else\n    {\n      setNextNonHintIndex(selectedIndex);\n    }\n\n  } \n\n  const goToNextPuzzle = () => {\n    setPuzzleData((prevData) => {\n      return { ...prevData, current_puzzle: prevData.puzzles[puzzleData.current_puzzle].next_puzzle };\n    });\n  };\n\n\n  const renderPuzzle = () => {\n    if (!puzzleData) return null;\n\n    const currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    //console.log(\"qwwqe \" + currentState);\n    const currentStateChars = currentState.split('');\n    //console.log(\"qwe \" + currentStateChars);\n    const greyCaps = Object.values(currentPuzzle.hints);\n\n    const duplicates = currentStateChars.reduce((acc, char, index) => {\n      if (!greyCaps.includes(char)) {\n        if (acc[char]) {\n          acc[char].push(index);\n        } else {\n          acc[char] = [index];\n        }\n      }\n      return acc;\n    }, {});\n    \n    const duplicateChars = Object.keys(duplicates).filter(\n      (char) => {\n        const cipherCharIndexes = duplicates[char];\n        const uniqueCipherChars = new Set(cipherCharIndexes.map(index => currentPuzzle.cipher[index]));\n        return uniqueCipherChars.size > 1;\n      }\n    ).filter(char => char != '_');\n    \n    const uniqueChars = [...new Set(currentState)].filter(\n      (char) => !greyCaps.includes(char) && !duplicateChars.includes(char)\n    );\n\n  \n    return (\n      <View style={styles.container}>\n        {currentPuzzle.isSolved ? (\n   \n       \n          <View>\n        \n         \n\n\n            <Text style={styles.solvedPuzzle}>{currentPuzzle.phrase}</Text>\n            <Text style={styles.solvedReference}>{currentPuzzle.book} {currentPuzzle.chapter}:{currentPuzzle.verse}</Text>\n            <View style={[{ width: \"95%\", margin:10, alignItems:'center' }]}><Button title=\"Go to Next Puzzle\" onPress={goToNextPuzzle} /></View>\n            {showConfetti && (\n              <ConfettiCannon\n                count={250}\n                origin={{ x: 0, y: 0 }}\n                fadeOut={true}\n                explosionSpeed={0}\n                fallSpeed={8000}\n              />\n            )}\n          </View>\n          \n        ) : (\n          <View style={styles.mainContainer}>\n            {renderCipherAndCurrentState(duplicateChars)}\n\n            <View style={styles.hintsContainer}>\n              <Text style={styles.hintText}> - {currentPuzzle.book}</Text>\n              <Text style={styles.hintText}> Topic: \"{currentPuzzle.topic}\"</Text>\n              <Text> </Text>\n            </View>\n\n            <View style={styles.keyboardContainer}>\n              <Keyboard\n              onKeyPressed={onKeyPressed} \n              greyCaps={greyCaps}\n              yellowCaps={duplicateChars}\n              greenCaps={uniqueChars} \n              />\n            </View>\n          </View>\n        )}\n \n      </View>\n    );\n\n  };\n\n\n  const handlePuzzlesPress = () => {\n    //console.log(\"hllo..?\");\n    setShowSettings(false);\n    setShowAboutBiblegram(false);\n    setShowPuzzles(!showPuzzles);\n  };\n\n  const handleSettingsPress = () => {\n    setShowPuzzles(false);\n    setShowAboutBiblegram(false);\n    setShowSettings(!showSettings);\n  };\n\n\n  const PuzzleSelection = ({ currentPuzzleId, puzzles, onSelect }) => {\n    return (\n      <View style={styles.puzzleSelectionContainer}>\n        {Object.keys(puzzles).map((key) => (\n          <TouchableOpacity\n            key={key}\n            style={styles.puzzleItem}\n            onPress={() => {\n              //console.log(\"Qweqw \" + key);\n              //console.log(currentPuzzleId)\n              if (key !== currentPuzzleId) {\n                onSelect(key);\n              }\n              else\n              {\n                setShowPuzzles(false);\n              }\n            }}\n          >\n            <Text style={styles.puzzleItemText}>\n              Puzzle {key} {puzzles[key].isSolved ? \"(Solved)\" : \"\"}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n    );\n  };\n  \n  const findFirstIndex = (cipherChars, hints) => {\n    for (let i = 0; i < cipherChars.length; i++) {\n      if (!hints[cipherChars[i]]) {\n        return i;\n      }\n    }\n    console.log(\"huge error in findfirstindex() function\")\n    return -1; // Return -1 if all characters are hints\n  };\n  \n  const handleReset = () => {\n    const currentPuzzle = puzzleData.puzzles[puzzleData.current_puzzle];\n    const cipherChars = currentPuzzle.cipher.split('');\n    setSelectedIndex(findFirstIndex(cipherChars, currentPuzzle.hints));\n    //const selectedIndex = findFirstNonHintIndex();\n    setCurrentState(\n      currentPuzzle.cipher\n        .split('')\n        .map((char) => currentPuzzle.hints[char] || '_')\n        .join('')\n    );\n    setShowSettings(false);\n\n  };\n\n  const handleAbout = () => {\n    setShowAboutBiblegram(true);\n\t\tsetShowSettings(false);\n  };\n\n  const handleAboutClose = () => {\n    setShowAboutBiblegram(false);\n\t\t\n  };\n\t\t\n  \n\n  let puzzle_number = 0\n  if(puzzleData != null)\n  {\n    puzzle_number = puzzleData.current_puzzle;\n  }\n\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.titleBarContainer}>\n        <TitleBar \n          puzzleNumber={puzzle_number}\n          onPuzzlesPress={handlePuzzlesPress} \n          onSettingsPress={handleSettingsPress} />\n      </View>\n      <View>\n        {showPuzzles ? (\n          <PuzzleSelection\n            currentPuzzleId={puzzle_number}\n            puzzles={puzzleData.puzzles}\n            onSelect={(index) => {\n              setCurrentPuzzle(index);\n              //findFirstIndex();\n              setShowPuzzles(false);\n            }}\n          />\n        ) : \n        showSettings ? (\n          <View style={styles.settingsMenu}>\n            <TouchableOpacity style={styles.menuItem} onPress={handleReset}>\n              <Text style={styles.menuItemText}>Reset</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.menuItem} onPress={handleAbout}>\n              <Text style={styles.menuItemText}>About Biblegram</Text>\n            </TouchableOpacity>\n          </View>\n        ) : showAboutBiblegram ? (\n          <AboutBiblegram onClose={handleAboutClose} />\n        ) : (\n          <View style={styles.puzzleContainer}>\n \t\t\t      {renderPuzzle()}\n          </View>\n        )}\n      </View>\n    \n    </SafeAreaView>\n  );\n}\n\nconst AboutBiblegram = ({ onClose }) => (\n  <View style={styles.aboutBiblegram}>\n    <Text style={styles.aboutTitle}>About Biblegram</Text>\n    <Text style={styles.aboutBiblegram}>\n      Biblegram is a cryptogram puzzle game based on Bible verses. Users can solve puzzles by decrypting the encoded text to reveal the original verse.\n    </Text>\n    <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n      <Text style={styles.closeButtonText}>Close</Text>\n    </TouchableOpacity>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  /*\n    justifyContent: \"center\",\n    fontWeight: \"italic\",\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  */\n  container: {\n    //fontFamily: 'Verdana',\n    flex: 1,\n    //alignItems: \"center\", \n    //flexDirection: \"column\",\n    //alignSelf: \"stretch\",\n    backgroundColor: '#F5F5F5', // Add this line to set the background color\n  },\n  titleBar: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: '#3F51B5',\n    alignItems: 'center',\n    //padding: 15,\n    paddingTop: 15,\n    paddingBottom: 15,\n    paddingRight: 10,\n    //alignItems: 'center',\n    paddingTop: 30,\n    flex: 1,\n    //paddingHorizontal: 15,\n    //letterSpacing: 7,\n  },\n  titleContainer: {\n    //alignItems: 'center',\n    //paddingTop: 30,\n    //flex:1,\n  },\n  title: {\n    fontFamily: 'cursive',\n    color: 'white',\n    fontSize: 28,\n    fontWeight: 'bold',\n    MarginVertical: 0,\n    justifyContent: \"center\",\n  },\n  puzzleNumber: {\n    paddingTop: 10,\n    //fontFamily: 'Verdana',\n    fontStyle: 'italic',\n    fontWeight: 'bold',\n    color: 'white',\n    fontSize: 15,\n    justifyContent: \"center\",\n    marginLeft: 20,\n\n  },\n  settingsMenu: {\n    fontWeight: 'bold',\n    //Not In Use\n    //fontWeight: \"italic\",\n    //fontFamily: 'Century-Gothic',\n    //backgroundColor: '#E0E0E0',\n    //paddingHorizontal: 15,\n    //paddingBottom: 15,\n  },\n  hints: {\n    fontWeight: 'bold',\n    alignSelf: \"stretch\",\n    //fontFamily: 'Verdana',\n    //color: colors.lightgrey,\n    fontSize: 15,\n    MarginVertical: 0,\n    justifyContent: \"right\",\n    alignItems: \"right\",\n  },\n  button: {\n    color: colors.lightgrey,\n    padding: 10,\n\t\t//flex: 1,\n    alignSelf: \"stretch\",\n  },\n  buttonText: {\n    fontWeight: 'bold',\n    paddingTop: 30,\n    fontStyle: \"italic\",\n    //fontFamily: 'Verdana',\n    color: 'white',\n    fontSize: 14,\n    //flex: 2,\n  },\n  menuItem: {\n    paddingLeft:20,\n    //paddingVertical: 10,\n  },\n  menuItemText: {\n    paddingTop:20,\n    //fontFamily: 'Verdana',\n    fontStyle: 'italic',\n    fontSize: 16,\n  },\n  aboutBiblegram: {\n    padding: 20,\n    alignSelf: \"stretch\",\n    flex: 1,\n    //alignItems: 'center',\n    //justifyContent: 'center',\n    //paddingHorizontal: 20,\n  },\n  aboutTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 20,\n  },\n  aboutText: {\n    fontSize: 16,\n    textAlign: 'justify',\n    marginBottom: 30,\n  },\n  closeButton: {\n    backgroundColor: '#3F51B5',\n    width: 70,\n    paddingHorizontal: 5,\n    paddingVertical: 5,\n    borderRadius: 5,\n    alignItems: 'center',\n  },\n  closeButtonText: {\n    //fontFamily: 'Verdana',\n    fontSize: 14,\n    color: 'white',\n  },\n  puzzleContainer: {\n    alignSelf: \"stretch\",\n    marginVertical: 20,\n    flexDirection: \"row\",\n    //Not In Use\n    //flex: 4,\n    //justifyContent: 'center',\n    //alignItems: 'center',\n  },\n  hintsContainer: {\n    alignSelf: \"stretch\",\n    marginVertical: 20,\n    fontSize: 15,\n    paddingRight: 25,\n    textAlign: 'right',\n  },\n  content: {\n    //Not In Use\n    //flex: 1,\n    //alignItems: 'center',\n    //justifyContent: 'center',\n    //fontSize: 18,\n    //color: 'black', // Add this line to set the text color\n  },\n  cipherText: {\n    //Not In Use\n    //fontFamily: 'Century-Gothic',\n    //fontSize: 18,\n    //color: '#333',\n  },\n  inputText: {\n    flexDirection: 'row', \n    flexWrap: 'wrap',\n    padding: 20,\n  },\n  hintText: {\n    fontSize: 18,\n    paddingRight: 20,\n    fontStyle: 'italic',\n    fontFamily: 'Verdana',\n    color: 'blue',\n    textAlign: 'right',\n  },\n  solvedPuzzle: {\n    padding: 20,\n    //fontFamily: 'Verdana',\n    fontSize: 16,\n    textTransform: 'capitalize',\n  },\n  solvedReference: {\n    paddingRight: 20,\n    paddingBottom: 20,\n    //fontFamily: 'Verdana',\n    fontSize: 12,\n    fontStyle: 'italic',\n    textTransform: 'capitalize',\n    textAlign: 'right'\n  },\n  keyboardContainer: {\n    padding: 20,\n    //justifyContent: 'center',\n    //alignItems: 'center',\n  },\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [566], () => (__webpack_require__(9599)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["colors","LEFT","_colorsToEmoji","_defineProperty","CLEAR","keys","keyWidth","Dimensions","width","length","keyHeight","StyleSheet","keyboard","alignSelf","marginTop","row","flexDirection","justifyContent","key","height","margin","borderRadius","backgroundColor","alignItems","keyText","color","fontWeight","fontFamily","fontSize","_ref","_ref$onKeyPressed","onKeyPressed","_ref$greenCaps","greenCaps","_ref$yellowCaps","yellowCaps","_ref$greyCaps","greyCaps","isLongButton","getKeyBGColor","includes","_jsx","View","style","styles","children","map","keyRow","i","Pressable","onPress","disabled","Text","toUpperCase","puzzle_data_structure","current_puzzle","puzzles","ciphersequence","cipher","phrase","topic","book","chapter","verse","isSolved","current_state","hints","start_time","end_time","time_taken","next_puzzle","TitleBar","puzzleNumber","onPuzzlesPress","onSettingsPress","_jsxs","titleBar","TouchableOpacity","button","buttonText","titleContainer","title","App","_useState","useState","_useState2","_slicedToArray","puzzleData","setPuzzleData","_useState3","_useState4","showPuzzles","setShowPuzzles","_useState5","_useState6","showSettings","setShowSettings","_useState7","_useState8","showAboutBiblegram","setShowAboutBiblegram","_useState9","_useState10","currentState","setCurrentState","_useState11","_useState12","selectedIndex","setSelectedIndex","_useState13","_useState14","showConfetti","setShowConfetti","screenWidth","charactersPerLine","Math","floor","findNthWordIndex","str","n","nthWord","split","indexOf","useEffect","loadPuzzleData","currentPuzzle","char","join","cipherChars","findFirstIndex","Platform","window","addEventListener","handleKeyDown","removeEventListener","event","toLowerCase","_ref2","_asyncToGenerator","storedData","AsyncStorage","JSON","parse","savePuzzleData","error","console","apply","arguments","_ref3","data","stringify","_x","renderCipherAndCurrentState","duplicateChars","currentStateChars","splitHere","text","maxLineLength","words","lines","newLineIndex","currentLine","push","splitIntoLines","brIndex","br","cipherChar","inputText","index","isHint","isSelected","isSameCipher","isDuplicate","additionalMargin","padding","textTransform","marginLeft","selectedCipherChar","nextIndex","newStateJoin","currentChar","checkIfSolved","prevData","updatedPuzzles","_objectSpread","Date","toISOString","setTimeout","newSelectedIndex","setNextNonHintIndex","goToNextPuzzle","log","puzzle_number","SafeAreaView","container","titleBarContainer","_ref4","currentPuzzleId","onSelect","puzzleSelectionContainer","Object","puzzleItem","puzzleItemText","puzzleId","prevPuzzleData","settingsMenu","menuItem","menuItemText","AboutBiblegram","onClose","puzzleContainer","values","duplicates","reduce","acc","filter","cipherCharIndexes","Set","size","uniqueChars","_toConsumableArray","solvedPuzzle","solvedReference","Button","ConfettiCannon","count","origin","x","y","fadeOut","explosionSpeed","fallSpeed","mainContainer","hintsContainer","hintText","keyboardContainer","Keyboard","renderPuzzle","_ref5","aboutBiblegram","aboutTitle","closeButton","closeButtonText","flex","paddingTop","paddingBottom","paddingRight","MarginVertical","fontStyle","paddingLeft","marginBottom","aboutText","textAlign","paddingHorizontal","paddingVertical","marginVertical","content","cipherText","flexWrap","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}